{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/kubeless-kafka/","result":{"data":{"site":{"siteMetadata":{"title":""}},"markdownRemark":{"id":"ec1875e7-a5aa-5e7f-bc6c-0ade99045f3d","excerpt":"In this blog post I want to show how I used Kubeless and Strimzi (Apache Kafka) to set up event-driven serverless functions on Kubernetes and Openshift. The…","html":"<p>In this blog post I want to show how I used Kubeless and Strimzi (Apache Kafka) to set up event-driven serverless functions on Kubernetes and Openshift.</p>\n<h2>The technologies</h2>\n<p>Kubeless is based on the idea of on premise serverless for Kubernetes, and uses built-in Kubernetes primitives to achieve this goal. Kubeless uses the <a href=\"https://coreos.com/operators/\">operator framework</a> and custom resource definitions (CRDs) to define objects like <code class=\"language-text\">functions</code> and <code class=\"language-text\">triggers</code> (more on this below).</p>\n<p>Apache Kafka is a distributed, horizontally scaleable, fault tolerant messaging system.\nKafka combines ideas of traditional queueing and messaging systems, with nice features like strong order guarantees and distributed topic replication. These things have made it a good choice for large enterprise applications.</p>\n<h2>Why?</h2>\n<p>Kubeless uses Apache Kafka as a messaging system under the hood and deploys its own Kafka instance in the Kubernetes cluster on installation. In my case, I already have a Kafka cluster for stream processing running in Kubernetes, in the form of Strimzi. Strimzi is a RedHat backed project which contains loads of useful deployment options and configuration for setting up Kafka on Kubernetes or Openshift. Like Kubeless, Strimzi also uses the operator framework, and allows you to define custom resources like <code class=\"language-text\">kafkas</code> and <code class=\"language-text\">topics</code> which will be automatically handled by its controllers/operators.</p>\n<p>In order to use Kubless with the already running Kafka cluster, I created an <a href=\"https://github.com/dimitraz/kafkaless-installer\">ansible playbook</a> to manage the set up. If you’re interested in trying it out yourself, make sure you have ansible installed and a running Kubernetes/Openshift cluster, and then run the playbook.</p>\n<h2>Event triggers</h2>\n<p>Now that Kubernetes, Kafka (Strimzi) and Kubeless are all running, we can start invoking our serverless functions. In my case, I wanted to be able to invoke a function any time my Kafka producer publishes a message to a certain topic.</p>\n<p>There are 3 steps to doing this:</p>\n<h3>Step 1</h3>\n<p>Create your kubeless function.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">apiVersion: kubeless.io/v1beta1\nkind: Function\nmetadata:\n  name: hello-world\n  namespace: functions\n  labels:\n    created-by: kubeless\n    function: hello-world\nspec:\n  handler: handler.hello\n  runtime: nodejs6\n  function: |\n    module.exports = {\n      hello: function(event, context) {\n        return &#39;Hello friend..&#39;\n      }\n    }</code></pre></div>\n<p>This does a few things:</p>\n<ul>\n<li>Defines a Kubeless function called <code class=\"language-text\">hello-world</code> using the <code class=\"language-text\">Function</code> custom resource</li>\n<li>Specifies the namespace the function should be deployed to (in this case “functions”)</li>\n<li>Defines the runtime and the code that will be executed. This is just a simple Javascript function which returns a <a href=\"https://media.giphy.com/media/250vleznvxXOM/200.gif\">“Hello friend”</a> string.</li>\n</ul>\n<h3>Step 2</h3>\n<p>Next, create a Kubeless event trigger. This will associate the <code class=\"language-text\">hello-world</code> function to a topic (let’s say <code class=\"language-text\">hello-topic</code>), so that every time the topic is published to, the function will be invoked.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">apiVersion: kubeless.io/v1beta1\nkind: KafkaTrigger\nmetadata:\n  clusterName: &quot;&quot;\n  finalizers:\n    - kubeless.io/kafkatrigger\n  labels:\n    created-by: kubeless\n  name: hello-trigger\n  namespace: functions\nspec:\n  functionSelector:\n    matchLabels:\n      created-by: kubeless\n      function: hello-world\n  topic: hello-topic</code></pre></div>\n<p>This does the following:</p>\n<ul>\n<li>Defines a <code class=\"language-text\">KafkaTrigger</code> custom resource called <code class=\"language-text\">hello-trigger</code> in the functions namespace</li>\n<li>Associates the function (spec.functionSelector.function) with the topic (spec.topic)</li>\n</ul>\n<h3>Step 3</h3>\n<p>Lastly, publish a message to the <code class=\"language-text\">hello-topic</code> topic. I like to use <a href=\"https://github.com/dimitraz/kafka-go-clients/tree/master/sarama\">Shopify’s Sarama client</a> when I’m testing. Check the pod logs for the function and make sure the function is correctly being invoked.</p>\n<hr>\n<p><strong>Note</strong> If you use that deployment file, make sure you update the <em>SERVERS</em> env var to the location of your Kafka cluster. In my case, this is <code class=\"language-text\">my-cluster-kafka-bootstrap.strimzi:9092</code>, where <em>my-cluster</em> is the name of the cluster, and <em>strimzi</em> is the namespace where it is running. If you’re using strimzi, you shouldn’t need to change the port or the <em>-kafka-bootstrap</em> suffix.</p>\n<h2>Serverless framework</h2>\n<p>The same can be done using the <a href=\"https://github.com/serverless/serverless-kubeless\">serverless framework</a> to make things a bit easier to manage.</p>\n<p>First, install serverless:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install -g serverless</code></pre></div>\n<p>Next, create a python (or any other language of your choice) function called <code class=\"language-text\">hello.py</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def hello(event, context):\n    print(&quot;Hello friend..&quot;)</code></pre></div>\n<p>Copy this <code class=\"language-text\">package.json</code> that will be used by serverless:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;name&quot;: &quot;hello-world&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;Example function for serverless kubeless&quot;,\n  &quot;dependencies&quot;: {\n    &quot;serverless-kubeless&quot;: &quot;^0.7.0&quot;\n  },\n  &quot;devDependencies&quot;: {},\n  &quot;scripts&quot;: {\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n  },\n  &quot;author&quot;: &quot;&quot;,\n  &quot;license&quot;: &quot;Apache-2.0&quot;\n}</code></pre></div>\n<p>Next, create the serverless yaml file, which will associate the function to the trigger topic:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">service: hello-world\n\nprovider:\n  name: kubeless\n  runtime: python3.6\n\nplugins:\n  - serverless-kubeless\n\nfunctions:\n  hello-world:\n    handler: handler.hello\n    events:\n      - trigger: &#39;hello-topic&#39;</code></pre></div>\n<p>That’s it! Run an <code class=\"language-text\">npm install</code> followed by a <code class=\"language-text\">serverless deploy</code>. Because Kubeless has been associated with the Strimzi cluster, no extra configuration is needed. Serverless deploys the function which can now be invoked by publishing to the hello topic.\nA nice advantage of using serverless is being able to invoke the function for testing purposes using the serverless cli:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">serverless invoke -f hello-world -l\n\nServerless: Calling function: hello...\n--------------------------------------------------------------------\nhello world</code></pre></div>\n<p>You can also see the logs of a function:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">serverless logs -f hello</code></pre></div>\n<p>And get information about that function:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">serverless info</code></pre></div>","frontmatter":{"title":"Serverless on Kubernetes with Kubeless and Kafka","date":"February 03, 2019","description":"Event-driven functions on Kubernetes"}},"previous":{"fields":{"slug":"/posts/docker-networking/"},"frontmatter":{"title":"Docker for Mac networking"}},"next":null},"pageContext":{"id":"ec1875e7-a5aa-5e7f-bc6c-0ade99045f3d","previousPostId":"a4be1076-c793-5a46-b067-2d2fba908712","nextPostId":null}},"staticQueryHashes":["2841359383","545424031"]}