{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/docker-networking/","result":{"data":{"site":{"siteMetadata":{"title":""}},"markdownRemark":{"id":"a4be1076-c793-5a46-b067-2d2fba908712","excerpt":"When Google Summer of Code first began, one of our first tasks was describing the steps for the required Kafka-Zookeeper setup.\nThe most straightforward and…","html":"<p>When Google Summer of Code first began, one of our first tasks was describing the steps for the required Kafka-Zookeeper setup.\nThe most straightforward and uncomplicated solution was running the UPS locally, while Zookeeper and the Kafka broker would run in two separate Docker containers.</p>\n<p>From the very beginning I ran into loads of issues. Producers and consumers could be started easily from within the containers and communicate between themselves at that level.</p>\n<p>As soon as I attempted to establish a connection between the local UPS instance and the Kafka broker, however, all communication seemed to come to a standstill.\nAlthough the application could connect to the broker on its published port and the topics were being created, the messages sent from the UPS were not being properly published and the consumer wasn’t reading anything back.</p>\n<p>It wasn’t the first time I had experienced service-container communication issues and a huge hint was of course the fact that this seemed to work seamlessly on Linux.\nAfter many headaches, investigation, trial and error here are a few solutions I’ve gathered and tested that could be of help to you too.</p>\n<h2>The problem</h2>\n<p>Docker for Mac uses Hyperkit to run a xhyve VM for the Docker daemon.\nThe VM uses VPNKit for exposing container ports to localhost, but the network settings and adapters are not configurable, meaning that containers cannot be accessed via their IPs and there is no network interface which bridges between the physical machine and the virtual machine.</p>\n<p>In summary, this means it’s pretty much impossible to directly reach a container via its internal address, while containers cannot access services on the host.</p>\n<h2>Connecting from a container to the host</h2>\n<ol>\n<li><strong>Route to the host</strong></li>\n</ol>\n<p>Attempting to connect to the host’s en0 interface address was the first breakthrough we had. Although this produces the expected results it’s not an optimal solution, given the possibility of constantly changing IP addresses, or of no connection at all.</p>\n<ol start=\"2\">\n<li><strong>Add the container IP to the lo0 interface</strong></li>\n</ol>\n<p>The most reliable solution I’ve come across so far is to alias to the loopback 0 interface:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo ifconfig lo0 alias $CONTAINER_IP</code></pre></div>\n<p>It’s a quick and easy option and works well for most use cases I’ve come across. You can use any unused IP address for this, but using the container IP is a personal preference of mine for easily keeping tabs.</p>\n<ol start=\"3\">\n<li><strong>Use the <code class=\"language-text\">192.168.65.1</code> address</strong></li>\n</ol>\n<p>The host can be accessed from the container using the address <code class=\"language-text\">192.168.65.1</code>.\nAs far as I know this is the address of the VM’s eth0 interface, but it isn’t very well documented (or documented at all, in that case).</p>\n<ol start=\"4\">\n<li><strong>Use the <code class=\"language-text\">docker.for.mac.localhost</code> DNS name</strong></li>\n</ol>\n<p>The most recent solution outlined in the docs recommends the following, from version <code class=\"language-text\">17.06</code> onwards:</p>\n<blockquote>\n<p>Connect to the special Mac-only DNS name <code class=\"language-text\">docker.for.mac.localhost</code> which will resolve to the internal IP address used by the host.</p>\n</blockquote>\n<h3>Alternative solutions</h3>\n<p>There are a few interesting hacks that I’ve yet to try, but that are worth taking a look at:</p>\n<ol>\n<li><a href=\"https://github.com/mal/docker-for-mac-host-bridge\"><strong>Docker for Mac host bridge by @mal</strong></a></li>\n</ol>\n<p>Uses <code class=\"language-text\">tuntap</code> to add a <code class=\"language-text\">tap</code> interface to the Docker VM for routing traffic back and forth between the containers and the host machine.</p>\n<ol start=\"2\">\n<li><a href=\"https://github.com/wojas/docker-mac-network\"><strong>OpenVPN by @wojas</strong></a></li>\n</ol>\n<p>Uses <code class=\"language-text\">OpenVPN</code> to access internal Docker networks from the host machine.</p>\n<h2>Connecting from the host to a container</h2>\n<p>There are two options here. Simply publishing the ports is the easiest route to go, but if you can’t mess around with ports and are facing port conflicts, do the following:</p>\n<ol>\n<li>Start the container</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker run -d -p 80:80 nginx</code></pre></div>\n<ol start=\"2\">\n<li>Add the alias to the loopback0 interface:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo ifconfig lo0 alias  172.17.0.4</code></pre></div>\n<ol start=\"3\">\n<li><code class=\"language-text\">sudo vi /etc/hosts</code> and add a line for your service, for example: <code class=\"language-text\">172.17.0.4 nginx.local</code></li>\n</ol>\n<p>You should be able to access it now at <code class=\"language-text\">nginx.local</code>.</p>\n<p><strong>Note</strong>: If you have multiple applications, just bind to a specific address and follow the same steps for all applications:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker run -p 192.100.200.1:80:80 nginx\ndocker run -p 192.100.200.2:80:80 drupal\n..,</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo ifconfig lo0 alias 192.100.200.1/24\nsudo ifconfig lo0 alias 192.100.200.2/24\n...</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">192.100.200.1 nginx.local\n192.100.200.2 drupal.local\n...</code></pre></div>\n<h2>Further reading</h2>\n<ul>\n<li>Github Issues: <a href=\"https://github.com/docker/for-mac/issues/1031\">docker/for-mac#1031</a>, <a href=\"https://github.com/docker/for-mac/issues/155\">docker/for-mac#155</a>, <a href=\"https://github.com/docker/for-mac/issues/68\">docker/for-mac#68</a>, <a href=\"https://github.com/docker/for-mac/issues/57\">docker/for-mac#57</a>, <a href=\"https://github.com/moby/hyperkit/issues/45\">moby/hyperkit#45</a>, <a href=\"https://github.com/moby/moby/issues/22753\">moby/moby#22753</a>, <a href=\"https://github.com/moby/moby/issues/22429\">moby/moby#22429</a></li>\n<li>Docker forums: <a href=\"https://forums.docker.com/t/support-tap-interface-for-direct-container-access-incl-multi-host/17835\">#17835</a>, <a href=\"https://forums.docker.com/t/ip-routing-to-container/8424\">#8424</a>, <a href=\"https://forums.docker.com/t/network-bridge-on-host/12414\">#12414</a>, <a href=\"https://forums.docker.com/t/connect-directly-to-container/18828\">#18828</a></li>\n<li><a href=\"https://docs.docker.com/docker-for-mac/networking/\">Docker for Mac docs</a></li>\n<li><a href=\"https://github.com/mal/docker-for-mac-host-bridge\">Docker for Mac Host bridge</a></li>\n<li><a href=\"https://github.com/wojas/docker-mac-network\">Access internal Docker networks using OpenVPN</a></li>\n</ul>\n<h2>Feedback</h2>\n<p>This post is a combination of information gathered from perusing the Docker forums, Github issues, Stack Overflow and Docker docs. A huge thanks goes to @almirkadric for taking the time to answer all my questions on the forum.\nIf you have anything to add or correct, please let me know.</p>","frontmatter":{"title":"Docker for Mac networking","date":"July 19, 2017","description":"Accessing services from containers with Docker for Mac"}},"previous":null,"next":{"fields":{"slug":"/posts/kubeless-kafka/"},"frontmatter":{"title":"Serverless on Kubernetes with Kubeless and Kafka"}}},"pageContext":{"id":"a4be1076-c793-5a46-b067-2d2fba908712","previousPostId":null,"nextPostId":"ec1875e7-a5aa-5e7f-bc6c-0ade99045f3d"}},"staticQueryHashes":["2841359383","545424031"]}